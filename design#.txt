Christabel Escarez
CS260 - Spring 2019
Project #1 Design and Test Plan
Sources: https://blog.testlodge.com/how-to-write-test-cases-for-software-with-sample/

Design Considerations:

The first design consideration I had was considering what experience I wanted the user to have. While I could program a database of artists and their songs, I had to also think about why a user would be trying to access this information. In considering the user and the program's use case, I then considered data flow in an ideal user experience. 

For this program and the target user of a record label employee tracking their artists, the user would first launch the program. The user will then receive a welcome message and a menu, allowing the user to view the complete artist list, search the artist list (by artist name, or song title), modify artist info, add an artist, remove an artist.

If the user opts to modify artist info, there is a second menu so the user may view the artist's top songs, their top headline, when they joined the record label, what genre their music is, search for an artist's song by title to view song popularity, or view the complete list of the selected artist's songs. 

If the user opts to view the list of songs, following the display of the song list, the user is shown a menu to
add a song, remove a song, and remove songs below a specified number of view counts.

For modularity, I will have separate classes for individual songs, individual artists, song lists, artist list, and the main calling environment. Both the song list and artist list will be singly linked lists, sorted by view count. List traversal to be recursive for displaying the lists.

The largest design consideration I had was how to store the song lists for each artist. For the artist list, I had a single artist roster file with all artist class member data. If I were to do the same for the song lists, there would be a separate file for each artist's songs. In addition to modifying the artist roster storage file, the program would then create a storage file for each added artist, and remove a storage file for each removed artist.

Else, I could have a single, large file that holds all information, but has a flag between artists to signal the end of a song list and the beginning of a new artist entry.

SMALLER DESIGN CONSIDERATIONS:

Song length: two int's or a double

Popularity: by veiws or likes

Artist List: display design

Song list: display design

--

Invalid Inputs:
Each menu user input will be checked for legal usage, giving the user three attempts to submit a valid entry before the program aborts. Cstring user inputs for searches will be case insensitive, but will require an exact match for artist name or song title. There will be errors reported to the user for any instance of input failure, including instances the song or artist data file fails to load due to incorrect filenname.


Number / type of ADTs: 


____
ADTs:

InputTools
    readInt(): read integer input
        input: cstring prompt requesting an integer from the user
        output: a legal integer
    readChar(): read character input
        input: cstring prompt requesting a character from the user
        output: a legal character
    readString(): read cstring input
        input: cstring prompt requesting a string from the user
        output: a legal cstring
    checkInput(): check integer input
        input: an integer
        output: either a legal integer or an error message requesting another input, 
            to be repeated three times before program exits with error message.
    checkInput(): check character input
        input: a character
        output: either a legal character or an error message requesting another input, 
            to be repeated three times before program exits with error message.
    checkString(): check cstring input
        input: a string of characters
        output: either a legal cstring or an error message requesting another input, 
            to be repeated three times before program exits with error message.

Song

SongList

Artist

ArtistList
    ArtistList(): constructor
    ~ArtistList(): destructor
    ArtistList(ArtistList &anArtistList): copy constructor

